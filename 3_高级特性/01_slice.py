# 切片

# 取一个list或tuple的部分元素是非常常见的操作。一个list如下
L = ['NameA', 'NameB', 'NameC', 'NameD', 'NameE']
# 取前三个元素，该怎么做？

""" fool solution """
[L[0], L[1], L[2]]
# >>> ['NameA', 'NameB', 'NameC']
# 扩展一下，取前N个元素就没辙了

""" 循环 """
# 取前N个元素，也就是索引为0-(N-1)的元素：
r = []
n = 3
for i in range(n):  # range() 函数返回的结果是一个整数序列的对象，而不是列表。但是可以利用 list 函数返回列表。
    r.append(L[i])  # append() 方法用于在列表末尾添加新的对象。该方法无返回值，但是会修改原来的列表。
print(r)
# >>> ['NameA', 'NameB', 'NameC']

"""
# 对这种经常取指定索引范围对操作，用循环十分繁琐，因此，python提供了切片(slice)操作符，大大简化操作。
L[0:3]
# >>> ['NameA', 'NameB', 'NameC']
# L[0:3]表示，从索引0开始取，直到索引3为止，但不包括索引3。即索引0，1，2，正好是3个元素。

# 如果第一个索引是0，还可以省略：
L[:3]
>>> ['NameA', 'NameB', 'NameC']

# 也可以从索引1开始，取出两个元素来：
L[1:3]
>>> ['NameB', 'NameC']

# 类似的，既然python支持L[-1]取倒数第一个元素，那么它同样支持倒数切片：
L[-1]
# >>> NameE
L[-1:]
# >>> ['NameE']

# 请注意！L[-2:]和L[-2:-1]的区别
L[-2:]
# >>>['NameD', 'NameE']
L[-2:-1]
# >>>['NameD']

# 个人理解：L[:3]、L[-2:] 方括号前闭后开
# ":"取到了不包括索引3之前的所有元素，取到了包括索引-2之后的所有元素
"""

# 先创建一个0-99的数列，通过切片轻松取出某一段数列。比如前10个数：
L1 = list(range(100))
# >>> [0, 1, 2, 3, ..., 99]
L1[:10]  # 前10个数
# >>> [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
L1[-10:]  # 后10个数
# >>> [90, 91, 92, 93, 94, 95, 96, 97, 98, 99]
L1[10:20]  # 前11-20个数
# >>> [10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
L1[:10:2]  # 前10个数，步长为2，每两个取一个
# >>> [0, 2, 4, 6, 8]
L1[::16]  # 所有数，每16个取一个：
# >>> [0, 16, 32, 48, 64, 80, 96]
L1[:]  # 甚至什么都不写，只写[:]就可以原样复制一个list
# >>> [0, 1, 2, 3, ..., 99]

# tuple也是一种list，唯一区别是tuple不可变。因此，tuple可以用切片操作，只是操作的结果仍是tuple:
(0, 1, 2, 3, 4)[:3]
# >>> (0, 1, 2)

# 字符串'xxx'也可以看成是一种list，每个元素就是一个字符。因此字符串也可以用切片操作，只是操作的结果仍是字符串：
'abcdefg'[:3]
# >>> abc
'abcdefg'[::2]
# >>> aceg

"""
在很多编程语言中，针对字符串提供了很多各种截取函数（例如substring），其实目的就是对字符串切片
python没有针对字符串的截取函数，自需要切片一个操作就可以完成，非常简单。
"""

# 练习：利用切片操作，实现一个trim()函数，去除字符串首尾的空格，注意不要调用str的strip()方法：
def trim(s):
    while s[:1] == ' ':
        s = s[1:]
    while s[-1:] == ' ':
        s = s[:-1]
    return s

if trim('hello  ') != 'hello':
    print('测试失败!')
elif trim('  hello') != 'hello':
    print('测试失败!')
elif trim('  hello  ') != 'hello':
    print('测试失败!')
elif trim('  hello  world  ') != 'hello  world':
    print('测试失败!')
elif trim('') != '':
    print('测试失败!')
elif trim('    ') != '':
    print('测试失败!')
else:
    print('测试成功!')


"""
# 注意！
def trim(s):
    while s[0] == ' ':
        s = s[1:]
    while s[-1] == ' ':
        s = s[:-1]
    return s
    
# 这种写法，是在默认字符串非空的情况下，对字符串的第一位和最后一位检索是否有空格
# 但如果字符串为空则会直接报错：IndexError: string index out of range
"""


# str2 = ''
# print(str2[0])
# IndexError: string index out of range