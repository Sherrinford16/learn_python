""" # Higher-order function"""

# 变量可以指向函数
# 以python内置的求绝对值函数abs()为例，调用该函数
print(abs(-10))  # 10
print(abs)  # <built-in function abs>
# 可见abs(-10)是函数调用，abs是函数本身。

# 要获得函数调用的结果，我们可以把结果复制给变量：
x = abs(-10)
print(x)  # 10

# 如果把函数本身赋值给变量呢？
"""
f = abs
print(f)  # <built-in function abs>
"""
# 结论：函数本身可以赋值给变量，即：变量可以指向函数。

# 如果一个变量指向了一个函数，那么，是否可以通过该变量来调用这个函数？验证：
""" f(-10)  # 10 """
# 10！说明变量f现在已经指向了abs函数本身。直接调用abs()函数和调用变量f()完全相同。

# 函数名也是变量
# 那么函数名是什么呢？函数名其实就是指向函数的变量！
# 对于abs()这个函数，完全可以把函数名abs看成变量，它指向一个可以计算绝对值的函数。

# 如果把abs指向其他对象，会有什么情况发生？
"""
abs = 10
# abs(-10)  # TypeError: 'int' object is not callable
"""
# 把abs指向10后，就无法通过abs(-10)调用该函数了！因为abs这个变量已经不指向求绝对值函数而是指向一个整数10

"""
# 注！由于abs函数实际上是定义在import builtins模块中的，
# 所以要让修改abs变量的指向在其他模块也生效
# 要用import builtins; builtins.abs = 10
"""

# 传入函数
# 既然变量可以指向函数，函数的参数能接受变量，那么一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数。
def add(x, y, f):
    return f(x) + f(y)  # ==> abs(x) + abs(y) ==> |x| + |y|
add(1, -6, abs())  # 7


# 把函数作为参数传入，这样的函数称为高阶函数，函数式编程就是指这种高度抽象的编程范式。
